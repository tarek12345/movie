import React, { ReactElement } from 'react';

import {
  Box,
  FlexSizeSpecValue,
  Layout,
  type MessageTemplateProps,
  Text,
  TextButton,
  createMessageTemplate,
  createParser,
  createRenderer,
  defaultProperties,
} from '@sendbird/uikit-message-template';

import { Carousel } from '../components/Carousel';
import ReactMessageTemplateImage from '../components/ReactMessageTemplateImage';
import '../index.css';
import {
  ReactParsedProperties,
  getDefaultStyles,
  setAlign,
  setImageAspectRatio,
  setImageStyle,
  setTextAlign,
  setTextStyle,
  setViewProps,
  webkitLineClampStyles,
} from '../styles';
import { ActionHandler } from './ActionHandler';

/**
 * Text that is fixed or fill parent should be wrapped in a div with max-width: 100% and max-height: 100%
 * This is to prevent text from overflowing the padding of the container
 */
function isFixedOrFill(view: Box | Text | TextButton) {
  const heightType = view?.height?.type;
  const widthType = view?.width?.type;
  const isFixedDiamension = heightType === 'fixed' || widthType === 'fixed';
  const isFill =
    (heightType === 'flex' && view?.height?.value === FlexSizeSpecValue.FillParent) ||
    (widthType === 'flex' && view?.width?.value === FlexSizeSpecValue.FillParent);
  return isFixedDiamension || isFill;
}

function convertNewlinesToBr(text: string) {
  return text.split('\n').map((line, index) => (
    <React.Fragment key={index}>
      {line}
      <br />
    </React.Fragment>
  ));
}

function renderText(view: Text | TextButton) {
  const { text, maxTextLines } = view;
  const isToBeWrapped = isFixedOrFill(view);
  const hasMaxLines = typeof maxTextLines === 'number' && maxTextLines > 0;

  const convertedText = convertNewlinesToBr(text);

  if (hasMaxLines || isToBeWrapped) {
    const wrapperStyling = {
      ...((hasMaxLines || isToBeWrapped) && { maxWidth: '100%' }),
      ...(isToBeWrapped && { maxHeight: '100%', overflow: 'hidden' }),
    };
    return (
      <div style={wrapperStyling}>
        {hasMaxLines ? <div style={webkitLineClampStyles(maxTextLines)}>{convertedText}</div> : convertedText}
      </div>
    );
  }
  return hasMaxLines ? <div style={webkitLineClampStyles(maxTextLines)}>{convertedText}</div> : convertedText;
}

export const renderer = createRenderer<ReactParsedProperties>({
  views: {
    box(props) {
      return (
        <ActionHandler
          className="sb-message-template__box"
          elementId={props.elementId}
          style={props.parsedProperties}
          props={props}
        >
          {props.children}
        </ActionHandler>
      );
    },
    text(props) {
      return (
        <ActionHandler
          className="sb-message-template__text"
          elementId={props.elementId}
          style={props.parsedProperties}
          props={props}
        >
          {renderText(props)}
        </ActionHandler>
      );
    },
    image(props) {
      // todo: add image backup
      return (
        <ActionHandler
          className="sb-message-template__image-container"
          elementId={props.elementId}
          style={props.parsedProperties}
          props={props}
        >
          <ReactMessageTemplateImage
            className="sb-message-template__image"
            alt="image"
            src={props.imageUrl}
            style={{ width: '100%', height: '100%', aspectRatio: 'inherit', objectFit: 'inherit' }}
            tintColor={props.imageStyle?.tintColor}
            metaData={props.metaData}
          />
        </ActionHandler>
      );
    },
    textButton(props) {
      return (
        <ActionHandler
          className="sb-message-template__text-button"
          elementId={props.elementId}
          style={props.parsedProperties}
          props={props}
        >
          {renderText({ maxTextLines: defaultProperties.textButton.maxTextLines, ...props })}
        </ActionHandler>
      );
    },
    imageButton(props) {
      return (
        <ActionHandler
          className="sb-message-template__image-container sb-message-template__image-button"
          elementId={props.elementId}
          style={props.parsedProperties}
          props={props}
        >
          <ReactMessageTemplateImage
            className="sb-message-template__image"
            alt="image-button"
            src={props.imageUrl}
            style={{ width: '100%', height: '100%', aspectRatio: 'inherit', objectFit: 'inherit' }}
            tintColor={props.imageStyle?.tintColor}
            metaData={props.metaData}
          />
        </ActionHandler>
      );
    },
    carouselView(props) {
      return (
        <Carousel
          maxChildWidth={props.carouselStyle?.maxChildWidth}
          spacing={props.carouselStyle?.spacing}
          style={props.parsedProperties}
        >
          {props.children as ReactElement<MessageTemplateProps>[]}
        </Carousel>
      );
    },
  },
});

export const parser = createParser<ReactParsedProperties>({
  mapBoxProps(props, options) {
    const styles = getDefaultStyles();

    setViewProps(styles, props, options);
    setAlign(styles, props.layout, props.align);

    return styles;
  },
  mapTextProps(props, options) {
    const styles = getDefaultStyles({ whiteSpace: 'pre-line', wordBreak: 'break-word' });

    // Better not set flex 1 to text
    setViewProps(styles, props, options);
    setTextStyle(styles, props, options);
    setAlign(styles, Layout.Row, props.align);
    setTextAlign(styles, props.align?.horizontal);

    return styles;
  },
  mapImageProps(props, options) {
    const styles = getDefaultStyles();

    setViewProps(styles, props, options);
    setImageStyle(styles, props.imageStyle);
    setImageAspectRatio(styles, props);

    return styles;
  },
  mapTextButtonProps(props, options) {
    const styles = getDefaultStyles({ whiteSpace: 'pre-line', alignItems: 'center', justifyContent: 'center' });
    setViewProps(styles, props, options);
    setTextStyle(styles, props, options);

    return styles;
  },
  mapImageButtonProps(props, options) {
    const styles = getDefaultStyles();

    setViewProps(styles, props, options);
    setImageStyle(styles, props.imageStyle);
    setImageAspectRatio(styles, props);

    return styles;
  },
  mapCarouselProps(props, options) {
    const styles = getDefaultStyles();
    setViewProps(styles, props, options);
    styles['paddingBlockStart'] = props.viewStyle?.padding?.top;
    styles['paddingBlockEnd'] = props.viewStyle?.padding?.bottom;
    styles['paddingInlineStart'] = props.viewStyle?.padding?.left;
    styles['paddingInlineEnd'] = props.viewStyle?.padding?.right;
    return styles;
  },
});

export const { MessageTemplate } = createMessageTemplate<ReactParsedProperties>({
  renderer,
  parser,
  Container: ({ children, className }) => {
    return (
      <div
        className={`sb-message-template__parent ${className}`}
        style={{
          display: 'flex',
          flexDirection: 'column',
          maxWidth: 400,
          marginBlockEnd: 24,
        }}
      >
        {children}
      </div>
    );
  },
});

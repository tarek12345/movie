import type { CSSProperties } from 'react';

import {
  Align,
  ComponentType,
  ComponentsUnion,
  FlexSizeSpecValue,
  Image,
  ImageButton,
  ImageStyle,
  Layout,
  MediaContentMode,
  ParserMapOptions,
  SizeSpec,
  Text,
  TextButton,
  ViewStyle,
  alignInFlex,
  defaultProperties,
} from '@sendbird/uikit-message-template';

import { isWrappedText } from '../util';

export type CustomCSSVariables = {
  '--border-width'?: string;
  '--border-color'?: string;
  '--border-radius'?: string;
};

export type ReactParsedProperties = CSSProperties & CustomCSSVariables;

export function getDefaultStyles(overrides?: ReactParsedProperties): ReactParsedProperties {
  return {
    display: 'flex',
    overflow: 'hidden',
    boxSizing: 'border-box',
    ...overrides,
  };
}

export function setViewProps(
  styles: ReactParsedProperties,
  props: ComponentsUnion['properties'],
  options: ParserMapOptions,
) {
  setViewSize(styles, props, options);
  setViewStyle(styles, props);
}

function setBorderStyle(
  styles: ReactParsedProperties,
  borderWidth: ViewStyle['borderWidth'],
  borderColor: ViewStyle['borderColor'],
  radius: ViewStyle['radius'],
) {
  if (borderWidth) {
    styles['--border-width'] = `${borderWidth}px`;
    styles['--border-color'] = borderColor || 'transparent';
  }

  if (radius) {
    styles['borderRadius'] = radius;
    styles['--border-radius'] = `${radius}px`;
  }
}

export function setViewStyle(styles: ReactParsedProperties, props: ComponentsUnion['properties']) {
  const { viewStyle } = props;

  styles['marginBlockStart'] = viewStyle?.margin?.top;
  styles['marginBlockEnd'] = viewStyle?.margin?.bottom;
  styles['marginInlineStart'] = viewStyle?.margin?.left;
  styles['marginInlineEnd'] = viewStyle?.margin?.right;

  const marginHorizontal = (viewStyle?.margin?.left ?? 0) + (viewStyle?.margin?.right ?? 0);
  if (marginHorizontal > 0 && styles.width === '100%') styles.width = `calc(100% - ${marginHorizontal}px)`;

  if (viewStyle?.backgroundColor) styles['backgroundColor'] = viewStyle.backgroundColor;

  // use JSON.stringify to escape special characters in image URL
  if (viewStyle?.backgroundImageUrl) {
    styles['backgroundImage'] = `url(${JSON.stringify(viewStyle.backgroundImageUrl)})`;
    styles['backgroundSize'] = '100% 100%';
    styles['backgroundPosition'] = 'center';
  }
  setBorderStyle(styles, viewStyle?.borderWidth, viewStyle?.borderColor, viewStyle?.radius);
}

function getViewSizeStyle(width: SizeSpec, height: SizeSpec, parentLayout: Layout) {
  const style: CSSProperties = {};

  if (width.type === 'flex' && width.value == FlexSizeSpecValue.FillParent) {
    style['width'] = '100%';
    if (parentLayout === Layout.Row) {
      style['flex'] = 1;
    }
  } else if (width.type === 'fixed' && width.value >= 0) {
    style['width'] = width.value;
  }

  if (height.type === 'flex' && height.value == FlexSizeSpecValue.FillParent) {
    style['height'] = '100%';
    if (parentLayout === Layout.Column) {
      style['flex'] = 1;
    }
  } else if (height.type === 'fixed' && height.value >= 0) {
    style['height'] = height.value;
  }

  return style;
}

export function setViewSize(
  styles: ReactParsedProperties,
  props: ComponentsUnion['properties'],
  options: ParserMapOptions,
) {
  const { width: defaultWidth, height: defaultHeight } = defaultProperties.view.size;
  const { parentLayout } = options;
  const sizeStyle = getViewSizeStyle(props.width ?? defaultWidth, props.height ?? defaultHeight, parentLayout);
  Object.assign(styles, sizeStyle);
}

export function setAlign(
  styles: ReactParsedProperties,
  layout: Layout = defaultProperties.box.layout,
  align: Align = defaultProperties.box.align,
) {
  if (layout === Layout.Row) {
    styles['flexDirection'] = 'row';
    styles['alignItems'] = alignInFlex(align.vertical);
    styles['justifyContent'] = alignInFlex(align.horizontal);
  }

  if (layout === Layout.Column) {
    styles['flexDirection'] = 'column';
    styles['alignItems'] = alignInFlex(align.horizontal);
    styles['justifyContent'] = alignInFlex(align.vertical);
  }
}

export function setTextAlign(
  styles: ReactParsedProperties,
  align: Align['horizontal'] = defaultProperties.box.align.horizontal,
) {
  styles.textAlign = align;
}

export function setImageStyle(styles: ReactParsedProperties, imageStyle?: ImageStyle) {
  const { contentMode = MediaContentMode.AspectFit } = imageStyle || {};

  if (contentMode) {
    switch (contentMode) {
      case MediaContentMode.AspectFill:
        styles['objectFit'] = 'cover';
        break;
      case MediaContentMode.AspectFit:
        styles['objectFit'] = 'contain';
        break;
      case MediaContentMode.ScalesToFill:
        styles['objectFit'] = 'fill';
        break;
    }
  }
}

// uses image meta-data to render images that doesn't break the UI
// https://sendbird.atlassian.net/wiki/spaces/UK/pages/2008220608/Message+template+-+Image+policy
export function setImageAspectRatio(styles: ReactParsedProperties, props: Image | ImageButton) {
  const imageMetaData = props?.metaData;
  if (!imageMetaData?.pixelHeight || !imageMetaData?.pixelWidth) {
    return;
  }
  if (props?.width?.type === 'fixed' || props?.height?.type === 'fixed') {
    return;
  }
  styles['aspectRatio'] = `${props?.metaData?.pixelWidth} / ${props?.metaData?.pixelHeight}`;
}

export function webkitLineClampStyles(numberOfLines: number): CSSProperties {
  return {
    WebkitLineClamp: numberOfLines,
    WebkitBoxOrient: 'vertical',
    display: '-webkit-box',
    overflow: 'hidden',
    overflowWrap: 'anywhere',
    flex: 1,
  };
}

export function setTextStyle(styles: ReactParsedProperties, props: Text | TextButton, options: ParserMapOptions) {
  const { textStyle, width } = props;
  // TODO: Change default as design
  const { size, color, weight } = textStyle || {};

  if (size) styles['fontSize'] = size;
  if (color) styles['color'] = color;
  if (weight) styles['fontWeight'] = weight;

  if (width?.type === 'flex' && width?.value == FlexSizeSpecValue.WrapContent) {
    styles['width'] = 'fit-content';
    styles['maxWidth'] = '100%';
  }

  if (props.type === ComponentType.Text) {
    const { siblings, elemIdx } = options;

    // To push out any subsequent components from the container,
    // if a prior one is long enough to occupy an entire line
    // @link https://sendbird.atlassian.net/browse/NOTI-709
    if (siblings != null && siblings.length >= 2 && siblings.every(isWrappedText)) {
      styles.flexShrink = siblings.length - 1 === elemIdx ? 1 : 0;
    }
  }
}

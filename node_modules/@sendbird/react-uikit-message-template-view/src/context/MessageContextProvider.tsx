// create a context provider for MessageComponent
//  - this is a wrapper for MessageComponent
import React from 'react';

import type { BaseMessage } from '@sendbird/chat/message';
import type { Action } from '@sendbird/uikit-message-template';

export type MessageContextProps = React.PropsWithChildren<{
  message: BaseMessage;
  handleWebAction?(event: React.SyntheticEvent, action: Action, message: BaseMessage): null;
  handleCustomAction?(event: React.SyntheticEvent, action: Action, message: BaseMessage): null;
  handlePredefinedAction?(event: React.SyntheticEvent, action: Action, message: BaseMessage): null;
}>;

export type MessageContextInterface = Omit<MessageContextProps, 'children'>;

const MessageContext = React.createContext<MessageContextInterface | null>(null);
const MessageProvider = (props: MessageContextProps) => {
  const { message, handleWebAction, handleCustomAction, handlePredefinedAction, children } = props;

  const value = React.useMemo(
    () => ({
      message,
      handleWebAction,
      handleCustomAction,
      handlePredefinedAction,
    }),
    [message?.updatedAt],
  );

  return <MessageContext.Provider value={value}>{children}</MessageContext.Provider>;
};

const useMessageContext = () => {
  const context = React.useContext(MessageContext);
  if (!context) {
    throw new Error('useMessageContext must be used within a MessageProvider');
  }
  return context;
};

export { MessageProvider, useMessageContext };

import { usePreservedCallback } from './usePreservedCallback';
import { useRefEffect } from './useRefEffect';

export type OnResize = (entry: ResizeObserverEntry) => void;

/**
 * Subscribes to ResizeObserver on the component exposing the Ref,
 * to detect changes in the size of DOM elements.
 * The ResizeObserver API is required.
 * If you are targeting browsers that do not support that API, probably need to add appropriate polyfill too.
 * @param onResize
 * @returns ref
 */
export function useResizeObserver<E extends HTMLElement = HTMLElement>(onResize: OnResize) {
  const resizeCallback = usePreservedCallback(onResize);
  const ref = useRefEffect<E>(
    (elem) => {
      const observer = new ResizeObserver((entries) => {
        if (entries[0] != null) {
          resizeCallback(entries[0]);
        }
      });
      observer.observe(elem);

      return () => {
        observer.unobserve(elem);
      };
    },
    [resizeCallback],
  );

  return ref;
}

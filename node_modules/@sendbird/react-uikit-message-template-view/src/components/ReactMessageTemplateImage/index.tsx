import React, { ImgHTMLAttributes, useCallback, useEffect, useState } from 'react';

import type { ImageMetaData } from '@sendbird/uikit-message-template';

import { isGif } from '../../util';
import { CanvasReactMessageTemplateImage } from './index.canvas';
import { ImgReactMessageTemplateImage } from './index.img';
import { PlaceholderReactMessageTemplateImage } from './index.placeholder';

export type Size = {
  width: number;
  height: number;
};

export interface ReactMessageTemplateImageProps extends ImgHTMLAttributes<HTMLImageElement> {
  tintColor?: string;
  metaData?: ImageMetaData;
}

const ReactMessageTemplateImage = ({ tintColor, metaData, ...props }: ReactMessageTemplateImageProps) => {
  const { hasError, onError } = useImageLoadError(props.src);

  if (props.onError) console.warn('`onError` is intercepted and not executed in the ReactMessageTemplateImage.');

  if (hasError) {
    return <PlaceholderReactMessageTemplateImage {...props} />;
  } else if (tintColor && !isGif(props.src)) {
    return <CanvasReactMessageTemplateImage {...props} onError={onError} tintColor={tintColor} metaData={metaData} />;
  } else {
    return <ImgReactMessageTemplateImage {...props} onError={onError} />;
  }
};

const useImageLoadError = (source?: string) => {
  const [hasError, setHasError] = useState<boolean>(false);

  useEffect(() => setHasError(false), [source]);

  return {
    hasError,
    onError: useCallback(() => setHasError(true), []),
  };
};

export default ReactMessageTemplateImage;

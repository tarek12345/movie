import { DependencyList } from 'react';
export type EffectRef<E extends HTMLElement = HTMLElement> = (element: E | null) => void;
export type CleanupCallback = () => void;
export type RefCallback<E extends HTMLElement = HTMLElement> = (element: E) => CleanupCallback | void;
/**
 * This hook can be used when you want to safely effect the value stored in useRef
 * Got this idea from https://github.com/facebook/react/issues/15176
 * @param callback
 * @param deps
 * @returns effect callback
 */
export declare function useRefEffect<E extends HTMLElement = HTMLElement>(callback: RefCallback<E>, deps: DependencyList): EffectRef<E>;

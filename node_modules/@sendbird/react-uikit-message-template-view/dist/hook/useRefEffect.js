import { useCallback, useRef } from 'react';
import { usePreservedCallback } from './usePreservedCallback';
/**
 * This hook can be used when you want to safely effect the value stored in useRef
 * Got this idea from https://github.com/facebook/react/issues/15176
 * @param callback
 * @param deps
 * @returns effect callback
 */
export function useRefEffect(callback, deps) {
    const preservedCallback = usePreservedCallback(callback);
    const disposeRef = useRef(noop);
    const effect = useCallback((element) => {
        disposeRef.current();
        disposeRef.current = noop;
        if (element != null) {
            const cleanup = callback(element);
            if (typeof cleanup === 'function') {
                disposeRef.current = cleanup;
            }
        }
    }, [preservedCallback, ...deps]);
    return effect;
}
function noop() { }

import { usePreservedCallback } from './usePreservedCallback';
import { useRefEffect } from './useRefEffect';
/**
 * Subscribes to ResizeObserver on the component exposing the Ref,
 * to detect changes in the size of DOM elements.
 * The ResizeObserver API is required.
 * If you are targeting browsers that do not support that API, probably need to add appropriate polyfill too.
 * @param onResize
 * @returns ref
 */
export function useResizeObserver(onResize) {
    const resizeCallback = usePreservedCallback(onResize);
    const ref = useRefEffect((elem) => {
        const observer = new ResizeObserver((entries) => {
            if (entries[0] != null) {
                resizeCallback(entries[0]);
            }
        });
        observer.observe(elem);
        return () => {
            observer.unobserve(elem);
        };
    }, [resizeCallback]);
    return ref;
}

var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { ComponentType } from '@sendbird/uikit-message-template';
import { useMessageContext } from '../context/MessageContextProvider';
import { useRecalculateWidth } from '../hook/useRecalculationSize';
const hasValidUrlProtocol = (url = '') => ['http://', 'https://', 'ftp://'].some((protocol) => url.startsWith(protocol));
/**
 * @param url - url to be checked
 * @returns url with http:// protocol if it doesn't have any protocol
 * @example
 * returnUrl('www.sendbird.com') // returns 'http://www.sendbird.com'
 * returnUrl('https://www.sendbird.com') // returns 'https://www.sendbird.com'
 * returnUrl('ftp://www.sendbird.com') // returns 'ftp://www.sendbird.com'
 * returnUrl('sendbird.com') // returns 'https://sendbird.com'
 **/
const returnUrl = (url = '') => {
    if (hasValidUrlProtocol(url)) {
        return url;
    }
    return `https://${url}`;
};
// todo: semantic html here is not perfect, need to revisit. Same for Button
export const ActionHandler = ({ children, props, className, style }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    const { recalculatedStyle, elemRef } = useRecalculateWidth({ style, props });
    const { message, handleWebAction, handleCustomAction, handlePredefinedAction } = useMessageContext();
    const borderClass = ((_a = props.viewStyle) === null || _a === void 0 ? void 0 : _a.borderWidth) ? 'sb-message-template__border' : '';
    const paddingStyles = {
        paddingBlockStart: (_c = (_b = props.viewStyle) === null || _b === void 0 ? void 0 : _b.padding) === null || _c === void 0 ? void 0 : _c.top,
        paddingBlockEnd: (_e = (_d = props.viewStyle) === null || _d === void 0 ? void 0 : _d.padding) === null || _e === void 0 ? void 0 : _e.bottom,
        paddingInlineStart: (_g = (_f = props.viewStyle) === null || _f === void 0 ? void 0 : _f.padding) === null || _g === void 0 ? void 0 : _g.left,
        paddingInlineEnd: (_j = (_h = props.viewStyle) === null || _h === void 0 ? void 0 : _h.padding) === null || _j === void 0 ? void 0 : _j.right,
    };
    const onClick = (e) => {
        var _a, _b, _c, _d, _e, _f, _g;
        if (((_a = props.action) === null || _a === void 0 ? void 0 : _a.type) === 'web') {
            if (handleWebAction) {
                handleWebAction(e, props.action, message);
            }
            else {
                (_c = window === null || window === void 0 ? void 0 : window.open(returnUrl((_b = props === null || props === void 0 ? void 0 : props.action) === null || _b === void 0 ? void 0 : _b.data), '_blank', 'noopener noreferrer')) === null || _c === void 0 ? void 0 : _c.focus();
            }
        }
        else if (((_d = props.action) === null || _d === void 0 ? void 0 : _d.type) === 'custom') {
            if (handleCustomAction) {
                handleCustomAction(e, props.action, message);
            }
            else {
                (_f = window === null || window === void 0 ? void 0 : window.open(returnUrl((_e = props === null || props === void 0 ? void 0 : props.action) === null || _e === void 0 ? void 0 : _e.data), '_blank', 'noopener noreferrer')) === null || _f === void 0 ? void 0 : _f.focus();
            }
        }
        else if (((_g = props.action) === null || _g === void 0 ? void 0 : _g.type) === 'uikit') {
            handlePredefinedAction === null || handlePredefinedAction === void 0 ? void 0 : handlePredefinedAction(e, props.action, message);
        }
    };
    if (props.type === ComponentType.TextButton) {
        return (React.createElement("button", { className: clx(className, borderClass), "data-sb-template-id": props.elementId, style: Object.assign(Object.assign({}, style), paddingStyles), onClick: onClick }, children));
    }
    const { display, flexDirection, justifyContent, alignItems, objectFit } = recalculatedStyle, wrapperStyles = __rest(recalculatedStyle, ["display", "flexDirection", "justifyContent", "alignItems", "objectFit"]);
    return (React.createElement("div", { ref: elemRef, className: clx(className, borderClass, props.action && 'sb-message-template__action'), "data-sb-template-id": props.elementId, style: wrapperStyles, onClick: onClick },
        React.createElement("div", { style: Object.assign({ display,
                flexDirection,
                justifyContent,
                alignItems,
                objectFit, width: '100%', height: '100%' }, paddingStyles) }, children)));
};
function clx(...names) {
    return names.filter((it) => !!it).join(' ');
}

// create a context provider for MessageComponent
//  - this is a wrapper for MessageComponent
import React from 'react';
const MessageContext = React.createContext(null);
const MessageProvider = (props) => {
    const { message, handleWebAction, handleCustomAction, handlePredefinedAction, children } = props;
    const value = React.useMemo(() => ({
        message,
        handleWebAction,
        handleCustomAction,
        handlePredefinedAction,
    }), [message === null || message === void 0 ? void 0 : message.updatedAt]);
    return React.createElement(MessageContext.Provider, { value: value }, children);
};
const useMessageContext = () => {
    const context = React.useContext(MessageContext);
    if (!context) {
        throw new Error('useMessageContext must be used within a MessageProvider');
    }
    return context;
};
export { MessageProvider, useMessageContext };

import type { PartialDeep } from 'type-fest';

import { isBoolean, isOneOf, isSet } from '../../../utils/validators.js';
import type { SBUConfig, SBUConfigRemote } from '../../types';

export function updateGroupChannelConfigs(
  target: SBUConfig['groupChannel'],
  local: PartialDeep<SBUConfig>,
  remote: PartialDeep<SBUConfigRemote>,
) {
  // target.channel
  updateChannelConfig(target, local, remote);
  // target.channel.input
  updateChannelInputConfig(target, local, remote);

  //target.channelList
  updateChannelListConfig(target, local, remote);

  //target.setting
  updateChannelSettingConfig(target, local, remote);
}

function updateChannelConfig(
  target: SBUConfig['groupChannel'],
  local: PartialDeep<SBUConfig>,
  remote: PartialDeep<SBUConfigRemote>,
) {
  // enableOgtag: boolean;
  if (remote.groupChannel?.channel && isBoolean(remote.groupChannel?.channel?.enableOgtag)) {
    target.channel.enableOgtag = remote.groupChannel.channel.enableOgtag;
  }
  if (local.groupChannel?.channel && isBoolean(local.groupChannel?.channel?.enableOgtag)) {
    target.channel.enableOgtag = local.groupChannel?.channel?.enableOgtag;
  }

  // enableTypingIndicator: boolean;
  if (remote.groupChannel?.channel && isBoolean(remote.groupChannel?.channel?.enableTypingIndicator)) {
    target.channel.enableTypingIndicator = remote.groupChannel?.channel?.enableTypingIndicator;
  }
  if (local.groupChannel?.channel && isBoolean(local.groupChannel?.channel?.enableTypingIndicator)) {
    target.channel.enableTypingIndicator = local.groupChannel?.channel?.enableTypingIndicator;
  }

  // enableReactions: boolean;
  if (remote.groupChannel?.channel && isBoolean(remote.groupChannel?.channel?.enableReactions)) {
    target.channel.enableReactions = remote.groupChannel?.channel?.enableReactions;
  }
  if (local.groupChannel?.channel && isBoolean(local.groupChannel?.channel?.enableReactions)) {
    target.channel.enableReactions = local.groupChannel?.channel?.enableReactions;
  }

  // enableReactionsSupergroup: boolean;
  if (remote.groupChannel?.channel && isBoolean(remote.groupChannel?.channel?.enableReactionsSupergroup)) {
    target.channel.enableReactionsSupergroup = remote.groupChannel?.channel?.enableReactionsSupergroup;
  }
  // NOTE: 2024.06.10 currently, no local configuration for this
  if (local.groupChannel?.channel && isBoolean(local.groupChannel?.channel?.enableReactionsSupergroup)) {
    console.warn(
      'Currently, EnableReactionsSupergroup feature is turned off by default. If you wish to use this feature, contact us: https://dashboard.sendbird.com/settings/contact_us?category=feedback_and_feature_requests&product=UIKit',
    );
  }

  // enableMention: boolean;
  if (remote.groupChannel?.channel && isBoolean(remote.groupChannel?.channel?.enableMention)) {
    target.channel.enableMention = remote.groupChannel?.channel?.enableMention;
  }
  if (local.groupChannel?.channel && isBoolean(local.groupChannel?.channel?.enableMention)) {
    target.channel.enableMention = local.groupChannel?.channel?.enableMention;
  }

  // replyType: 'none' | 'quote_reply' | 'thread';
  if (
    remote.groupChannel?.channel &&
    isOneOf(remote.groupChannel?.channel?.replyType, ['none', 'quote_reply', 'thread'])
  ) {
    target.channel.replyType = remote.groupChannel?.channel?.replyType;
  }
  if (
    local.groupChannel?.channel &&
    isOneOf(local.groupChannel?.channel?.replyType, ['none', 'quote_reply', 'thread'])
  ) {
    target.channel.replyType = local.groupChannel?.channel?.replyType;
  }

  // threadReplySelectType: 'thread' | 'parent';
  if (
    remote.groupChannel?.channel &&
    isOneOf(remote.groupChannel?.channel?.threadReplySelectType, ['thread', 'parent'])
  ) {
    target.channel.threadReplySelectType = remote.groupChannel?.channel?.threadReplySelectType;
  }
  if (
    local.groupChannel?.channel &&
    isOneOf(local.groupChannel?.channel?.threadReplySelectType, ['thread', 'parent'])
  ) {
    target.channel.threadReplySelectType = local.groupChannel?.channel?.threadReplySelectType;
  }

  // enableVoiceMessage: boolean;
  if (remote.groupChannel?.channel && isBoolean(remote.groupChannel?.channel?.enableVoiceMessage)) {
    target.channel.enableVoiceMessage = remote.groupChannel?.channel?.enableVoiceMessage;
  }
  if (local.groupChannel?.channel && isBoolean(local.groupChannel?.channel?.enableVoiceMessage)) {
    target.channel.enableVoiceMessage = local.groupChannel?.channel?.enableVoiceMessage;
  }

  // typingIndicatorTypes: Set<TypingIndicatorType>;
  // NOTE: 2023.11.03 currently, no remote configuration for this
  // if (remote.groupChannel?.channel && isArray(remote.groupChannel?.channel?.typingIndicatorTypes)) {
  //   target.channel.typingIndicatorTypes = toSet(remote.groupChannel?.channel?.typingIndicatorTypes);
  // }
  if (local.groupChannel?.channel && isSet(local.groupChannel?.channel?.typingIndicatorTypes)) {
    target.channel.typingIndicatorTypes = local.groupChannel?.channel?.typingIndicatorTypes;
  }

  // enableFeedback: boolean;
  // NOTE: 2024.01.12 currently, no remote configuration for this
  // if (remote.groupChannel?.channel && isBoolean(remote.groupChannel?.channel?.enableFeedback)) {
  //   target.channel.enableFeedback = remote.groupChannel?.channel?.enableFeedback;
  // }
  if (local.groupChannel?.channel && isBoolean(local.groupChannel?.channel?.enableFeedback)) {
    target.channel.enableFeedback = local.groupChannel?.channel?.enableFeedback;
  }

  // enableSuggestedReplies: boolean;
  // NOTE: 2024.02.01 currently, no remote configuration for this
  // if (remote.groupChannel?.channel && isBoolean(remote.groupChannel?.channel?.enableSuggestedReplies)) {
  //   target.channel.enableSuggestedReplies = remote.groupChannel?.channel?.enableSuggestedReplies;
  // }
  if (local.groupChannel?.channel && isBoolean(local.groupChannel?.channel?.enableSuggestedReplies)) {
    target.channel.enableSuggestedReplies = local.groupChannel?.channel?.enableSuggestedReplies;
  }

  // showSuggestedRepliesFor: 'all_messages' | 'last_message_only';
  // NOTE: 2024.02.25 currently, no remote configuration for this
  // if (
  //   remote.groupChannel?.channel &&
  //   isOneOf(remote.groupChannel?.channel?.showSuggestedRepliesFor, ['all_messages', 'last_message_only'])
  // ) {
  //   target.channel.showSuggestedRepliesFor = remote.groupChannel?.channel?.showSuggestedRepliesFor;
  // }
  if (
    local.groupChannel?.channel &&
    isOneOf(local.groupChannel?.channel?.showSuggestedRepliesFor, ['all_messages', 'last_message_only'])
  ) {
    target.channel.showSuggestedRepliesFor = local.groupChannel?.channel?.showSuggestedRepliesFor;
  }

  // suggestedRepliesDirection: 'vertical' | 'horizontal';
  // NOTE: 2024.04.22 currently, no remote configuration for this
  // if (
  //   remote.groupChannel?.channel &&
  //   isOneOf(remote.groupChannel?.channel?.suggestedRepliesDirection, ['vertical', 'horizontal'])
  // ) {
  //   target.channel.suggestedRepliesDirection = remote.groupChannel?.channel?.suggestedRepliesDirection;
  // }
  if (
    local.groupChannel?.channel &&
    isOneOf(local.groupChannel?.channel?.suggestedRepliesDirection, ['vertical', 'horizontal'])
  ) {
    target.channel.suggestedRepliesDirection = local.groupChannel?.channel?.suggestedRepliesDirection;
  }

  // enableMarkdownForUserMessage: boolean;
  // NOTE: 2024.06.03 currently, no remote configuration for this
  // if (remote.groupChannel?.channel && isBoolean(remote.groupChannel?.channel?.enableMarkdownForUserMessage)) {
  //   target.channel.enableMarkdownForUserMessage = remote.groupChannel?.channel?.enableMarkdownForUserMessage;
  // }
  if (local.groupChannel?.channel && isBoolean(local.groupChannel?.channel?.enableMarkdownForUserMessage)) {
    target.channel.enableMarkdownForUserMessage = local.groupChannel?.channel?.enableMarkdownForUserMessage;
  }

  // enableFormTypeMessage: boolean;
  // NOTE: 2024.06.17 currently, no remote configuration for this
  // if (remote.groupChannel?.channel && isBoolean(remote.groupChannel?.channel?.enableFormTypeMessage)) {
  //   target.channel.enableFormTypeMessage = remote.groupChannel?.channel?.enableFormTypeMessage;
  // }
  if (local.groupChannel?.channel && isBoolean(local.groupChannel?.channel?.enableFormTypeMessage)) {
    target.channel.enableFormTypeMessage = local.groupChannel?.channel?.enableFormTypeMessage;
  }
}

function updateChannelInputConfig(
  target: SBUConfig['groupChannel'],
  local: PartialDeep<SBUConfig>,
  remote: PartialDeep<SBUConfigRemote>,
) {
  // input.enableDocument: boolean;
  if (remote.groupChannel?.channel?.input && isBoolean(remote.groupChannel?.channel?.input?.enableDocument)) {
    target.channel.input.enableDocument = remote.groupChannel?.channel?.input?.enableDocument;
  }
  if (local.groupChannel?.channel?.input && isBoolean(local.groupChannel?.channel?.input?.enableDocument)) {
    target.channel.input.enableDocument = local.groupChannel?.channel?.input?.enableDocument;
  }

  // input.camera.enablePhoto: boolean;
  if (
    remote.groupChannel?.channel?.input?.camera &&
    isBoolean(remote.groupChannel?.channel?.input?.camera?.enablePhoto)
  ) {
    target.channel.input.camera.enablePhoto = remote.groupChannel?.channel?.input?.camera?.enablePhoto;
  }
  if (
    local.groupChannel?.channel?.input?.camera &&
    isBoolean(local.groupChannel?.channel?.input?.camera?.enablePhoto)
  ) {
    target.channel.input.camera.enablePhoto = local.groupChannel?.channel?.input?.camera?.enablePhoto;
  }

  // input.camera.enableVideo: boolean;
  if (
    remote.groupChannel?.channel?.input?.camera &&
    isBoolean(remote.groupChannel?.channel?.input?.camera?.enableVideo)
  ) {
    target.channel.input.camera.enableVideo = remote.groupChannel?.channel?.input?.camera?.enableVideo;
  }
  if (
    local.groupChannel?.channel?.input?.camera &&
    isBoolean(local.groupChannel?.channel?.input?.camera?.enableVideo)
  ) {
    target.channel.input.camera.enableVideo = local.groupChannel?.channel?.input?.camera?.enableVideo;
  }

  // input.gallery.enablePhoto: boolean;
  if (
    remote.groupChannel?.channel?.input?.gallery &&
    isBoolean(remote.groupChannel?.channel?.input?.gallery?.enablePhoto)
  ) {
    target.channel.input.gallery.enablePhoto = remote.groupChannel?.channel?.input?.gallery?.enablePhoto;
  }
  if (
    local.groupChannel?.channel?.input?.gallery &&
    isBoolean(local.groupChannel?.channel?.input?.gallery?.enablePhoto)
  ) {
    target.channel.input.gallery.enablePhoto = local.groupChannel?.channel?.input?.gallery?.enablePhoto;
  }

  // input.gallery.enableVideo: boolean;
  if (
    remote.groupChannel?.channel?.input?.gallery &&
    isBoolean(remote.groupChannel?.channel?.input?.gallery?.enableVideo)
  ) {
    target.channel.input.gallery.enableVideo = remote.groupChannel?.channel?.input?.gallery?.enableVideo;
  }
  if (
    local.groupChannel?.channel?.input?.gallery &&
    isBoolean(local.groupChannel?.channel?.input?.gallery?.enableVideo)
  ) {
    target.channel.input.gallery.enableVideo = local.groupChannel?.channel?.input?.gallery?.enableVideo;
  }
}

function updateChannelListConfig(
  target: SBUConfig['groupChannel'],
  local: PartialDeep<SBUConfig>,
  remote: PartialDeep<SBUConfigRemote>,
) {
  // enableTypingIndicator: boolean;
  if (remote.groupChannel?.channelList && isBoolean(remote.groupChannel?.channelList?.enableTypingIndicator)) {
    target.channelList.enableTypingIndicator = remote.groupChannel.channelList.enableTypingIndicator;
  }
  if (local.groupChannel?.channelList && isBoolean(local.groupChannel?.channelList?.enableTypingIndicator)) {
    target.channelList.enableTypingIndicator = local.groupChannel?.channelList?.enableTypingIndicator;
  }

  // enableMessageReceiptStatus: boolean;
  if (remote.groupChannel?.channelList && isBoolean(remote.groupChannel?.channelList?.enableMessageReceiptStatus)) {
    target.channelList.enableMessageReceiptStatus = remote.groupChannel?.channelList?.enableMessageReceiptStatus;
  }
  if (local.groupChannel?.channelList && isBoolean(local.groupChannel?.channelList?.enableMessageReceiptStatus)) {
    target.channelList.enableMessageReceiptStatus = local.groupChannel?.channelList?.enableMessageReceiptStatus;
  }
}

function updateChannelSettingConfig(
  target: SBUConfig['groupChannel'],
  local: PartialDeep<SBUConfig>,
  remote: PartialDeep<SBUConfigRemote>,
) {
  // enableMessageSearch: boolean;
  if (remote.groupChannel?.setting && isBoolean(remote.groupChannel?.setting?.enableMessageSearch)) {
    target.setting.enableMessageSearch = remote.groupChannel.setting.enableMessageSearch;
  }
  if (local.groupChannel?.setting && isBoolean(local.groupChannel?.setting?.enableMessageSearch)) {
    target.setting.enableMessageSearch = local.groupChannel?.setting?.enableMessageSearch;
  }
}

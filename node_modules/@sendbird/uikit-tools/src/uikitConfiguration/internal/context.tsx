import React, { createContext, useCallback, useContext, useState } from 'react';
import type { PartialDeep } from 'type-fest';

import type SendbirdChat from '@sendbird/chat';

import { applicationAttributes } from '../../constants/index.js';
import { usePreservedCallback } from '../../hooks/index.js';
import { snakeToCamel } from '../../utils/convertors.js';
import type { SBUConfig } from '../types.js';
import { SBUConfigStorage, UIKitConfigManager } from './configManager.js';
import { createInitialRemoteConfig, initialConfig } from './initialConfig.js';
import { getConfigsByPriority, isRawSBUConfigPayload } from './utils.js';

/**
 * initDashboardConfigs: You should call this function when the sdk.connect() is resolved.
 * configs: The configs set by code level and dashboard level.
 * configsWithAppAttr: The configs helper for features related to app attributes.
 * */
interface UIKitConfigContextInterface {
  initDashboardConfigs: (sdk: SendbirdChat) => Promise<void>;
  configs: SBUConfig;
  configsWithAppAttr: (sdk: SendbirdChat) => {
    groupChannel: {
      channel: {
        enableReactions: boolean;
        enableReactionsSupergroup: boolean;
        enableOgtag: boolean;
      };
      setting: {
        enableMessageSearch: boolean;
      };
    };
    openChannel: {
      channel: {
        enableOgtag: boolean;
      };
    };
  };
}

function getApplicationAttributes(sdk: SendbirdChat): string[] {
  return sdk.appInfo?.applicationAttributes ?? [];
}

const UIKitConfigContext = createContext<UIKitConfigContextInterface>({
  initDashboardConfigs: () => Promise.resolve(),
  configs: initialConfig,
  configsWithAppAttr: () => initialConfig,
});

export type UIKitConfigProviderProps = React.PropsWithChildren<{
  // Configurations set by code level
  localConfigs?: PartialDeep<SBUConfig>;
  // If the storage value is not provided,
  // it'll fetch the new configs set by dashboard everytime
  storage?: SBUConfigStorage;
}>;

const UIKitConfigProvider = ({ storage, children, localConfigs = {} }: UIKitConfigProviderProps) => {
  // Set by Feature Config setting in Dashboard
  const [remoteConfigs, setRemoteConfigs] = useState(createInitialRemoteConfig);
  const [manager] = useState(() => new UIKitConfigManager(storage));

  const initDashboardConfigs = useCallback(
    async (sdk: SendbirdChat) => {
      // Compare the sdk uikitConfig's lastUpdatedAt <-> stored one
      const storedConfigPayload = await manager.init(sdk.appId);

      if (sdk.appInfo && sdk.appInfo.uikitConfigInfo.lastUpdatedAt === storedConfigPayload.updatedAt) {
        setRemoteConfigs(storedConfigPayload.configuration);
      } else {
        try {
          // @ts-ignore
          const response = await sdk.getUIKitConfiguration();
          if (isRawSBUConfigPayload(response.json)) {
            const remoteConfigPayload = snakeToCamel(response.json);
            const updatedConfigPayload = await manager.update(remoteConfigPayload);
            setRemoteConfigs(updatedConfigPayload.configuration);
          }
        } catch {
          setRemoteConfigs(storedConfigPayload.configuration);
        }
      }
    },
    [manager],
  );

  const configs = getConfigsByPriority(localConfigs, remoteConfigs);
  const configsWithAppAttr: UIKitConfigContextInterface['configsWithAppAttr'] = usePreservedCallback(
    (sdk: SendbirdChat) => ({
      groupChannel: {
        channel: {
          get enableReactions() {
            return (
              configs.groupChannel.channel.enableReactions &&
              getApplicationAttributes(sdk).includes(applicationAttributes.reactions)
            );
          },
          get enableReactionsSupergroup() {
            return (
              configs.groupChannel.channel.enableReactionsSupergroup &&
              getApplicationAttributes(sdk).includes(applicationAttributes.reactions)
            );
          },
          get enableOgtag() {
            return (
              configs.groupChannel.channel.enableOgtag &&
              getApplicationAttributes(sdk).includes(applicationAttributes.enable_og_tag)
            );
          },
        },
        setting: {
          get enableMessageSearch() {
            return (
              configs.groupChannel.setting.enableMessageSearch &&
              getApplicationAttributes(sdk).includes(applicationAttributes.message_search_v3)
            );
          },
        },
      },
      openChannel: {
        channel: {
          get enableOgtag() {
            return (
              configs.openChannel.channel.enableOgtag &&
              getApplicationAttributes(sdk).includes(applicationAttributes.enable_og_tag)
            );
          },
        },
      },
    }),
  );

  return (
    <UIKitConfigContext.Provider value={{ initDashboardConfigs, configs, configsWithAppAttr }}>
      {children}
    </UIKitConfigContext.Provider>
  );
};

const useUIKitConfig = () => useContext(UIKitConfigContext);

export { UIKitConfigContext, UIKitConfigProvider, useUIKitConfig };

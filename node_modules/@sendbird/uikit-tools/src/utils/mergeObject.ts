import type { PartialDeep } from 'type-fest';

import { isSameType } from './validators.js';

/**
 * Merges values from the subset object into the target object.
 *
 * @param target - The target object to merge into.
 * @param subset - The subset object from which values are merged into the target.
 * @returns A new object resulting from the merge operation.
 */
export function mergeObject<T extends Record<string, any>, L extends PartialDeep<T>>(target: T, subset: L): T {
  // copy target to prevent mutation
  const object = { ...target };

  Object.keys(subset).forEach((key) => {
    if (Object.prototype.hasOwnProperty.call(object, key) && isSameType(object[key], subset[key])) {
      if (typeof subset[key] === 'object' && !Array.isArray(subset[key])) {
        // Recursively call getConfigsByPriority only when the value of the key is Object
        object[key as keyof T] = mergeObject(object[key], subset[key]);
      } else {
        object[key as keyof T] = subset[key];
      }
    }
  });

  return object;
}

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useUIKitConfig = exports.UIKitConfigProvider = exports.UIKitConfigContext = void 0;
const react_1 = __importStar(require("react"));
const index_js_1 = require("../../constants/index.js");
const index_js_2 = require("../../hooks/index.js");
const convertors_js_1 = require("../../utils/convertors.js");
const configManager_js_1 = require("./configManager.js");
const initialConfig_js_1 = require("./initialConfig.js");
const utils_js_1 = require("./utils.js");
function getApplicationAttributes(sdk) {
    var _a, _b;
    return (_b = (_a = sdk.appInfo) === null || _a === void 0 ? void 0 : _a.applicationAttributes) !== null && _b !== void 0 ? _b : [];
}
const UIKitConfigContext = (0, react_1.createContext)({
    initDashboardConfigs: () => Promise.resolve(),
    configs: initialConfig_js_1.initialConfig,
    configsWithAppAttr: () => initialConfig_js_1.initialConfig,
});
exports.UIKitConfigContext = UIKitConfigContext;
const UIKitConfigProvider = ({ storage, children, localConfigs = {} }) => {
    // Set by Feature Config setting in Dashboard
    const [remoteConfigs, setRemoteConfigs] = (0, react_1.useState)(initialConfig_js_1.createInitialRemoteConfig);
    const [manager] = (0, react_1.useState)(() => new configManager_js_1.UIKitConfigManager(storage));
    const initDashboardConfigs = (0, react_1.useCallback)((sdk) => __awaiter(void 0, void 0, void 0, function* () {
        // Compare the sdk uikitConfig's lastUpdatedAt <-> stored one
        const storedConfigPayload = yield manager.init(sdk.appId);
        if (sdk.appInfo && sdk.appInfo.uikitConfigInfo.lastUpdatedAt === storedConfigPayload.updatedAt) {
            setRemoteConfigs(storedConfigPayload.configuration);
        }
        else {
            try {
                // @ts-ignore
                const response = yield sdk.getUIKitConfiguration();
                if ((0, utils_js_1.isRawSBUConfigPayload)(response.json)) {
                    const remoteConfigPayload = (0, convertors_js_1.snakeToCamel)(response.json);
                    const updatedConfigPayload = yield manager.update(remoteConfigPayload);
                    setRemoteConfigs(updatedConfigPayload.configuration);
                }
            }
            catch (_a) {
                setRemoteConfigs(storedConfigPayload.configuration);
            }
        }
    }), [manager]);
    const configs = (0, utils_js_1.getConfigsByPriority)(localConfigs, remoteConfigs);
    const configsWithAppAttr = (0, index_js_2.usePreservedCallback)((sdk) => ({
        groupChannel: {
            channel: {
                get enableReactions() {
                    return (configs.groupChannel.channel.enableReactions &&
                        getApplicationAttributes(sdk).includes(index_js_1.applicationAttributes.reactions));
                },
                get enableReactionsSupergroup() {
                    return (configs.groupChannel.channel.enableReactionsSupergroup &&
                        getApplicationAttributes(sdk).includes(index_js_1.applicationAttributes.reactions));
                },
                get enableOgtag() {
                    return (configs.groupChannel.channel.enableOgtag &&
                        getApplicationAttributes(sdk).includes(index_js_1.applicationAttributes.enable_og_tag));
                },
            },
            setting: {
                get enableMessageSearch() {
                    return (configs.groupChannel.setting.enableMessageSearch &&
                        getApplicationAttributes(sdk).includes(index_js_1.applicationAttributes.message_search_v3));
                },
            },
        },
        openChannel: {
            channel: {
                get enableOgtag() {
                    return (configs.openChannel.channel.enableOgtag &&
                        getApplicationAttributes(sdk).includes(index_js_1.applicationAttributes.enable_og_tag));
                },
            },
        },
    }));
    return (react_1.default.createElement(UIKitConfigContext.Provider, { value: { initDashboardConfigs, configs, configsWithAppAttr } }, children));
};
exports.UIKitConfigProvider = UIKitConfigProvider;
const useUIKitConfig = () => (0, react_1.useContext)(UIKitConfigContext);
exports.useUIKitConfig = useUIKitConfig;

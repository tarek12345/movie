import type { SnakeCasedPropertiesDeep } from 'type-fest';
interface ChannelInputConfig {
    camera: {
        enablePhoto: boolean;
        enableVideo: boolean;
    };
    gallery: {
        enablePhoto: boolean;
        enableVideo: boolean;
    };
    enableDocument: boolean;
}
interface CommonConfig {
    enableUsingDefaultUserProfile: boolean;
}
interface GroupChannelConfig {
    channel: {
        enableOgtag: boolean;
        enableTypingIndicator: boolean;
        enableReactions: boolean;
        enableReactionsSupergroup: boolean;
        enableMention: boolean;
        replyType: 'none' | 'quote_reply' | 'thread';
        threadReplySelectType: 'thread' | 'parent';
        enableVoiceMessage: boolean;
        input: ChannelInputConfig;
        typingIndicatorTypes: Set<'text' | 'bubble'>;
        enableFeedback: boolean;
        enableSuggestedReplies: boolean;
        showSuggestedRepliesFor: 'all_messages' | 'last_message_only';
        suggestedRepliesDirection: 'vertical' | 'horizontal';
        enableMarkdownForUserMessage: boolean;
        enableFormTypeMessage: boolean;
    };
    channelList: {
        enableTypingIndicator: boolean;
        enableMessageReceiptStatus: boolean;
    };
    setting: {
        enableMessageSearch: boolean;
    };
}
interface OpenChannelConfig {
    channel: {
        enableOgtag: boolean;
        input: ChannelInputConfig;
    };
}
export interface SBUConfig {
    common: CommonConfig;
    groupChannel: GroupChannelConfig;
    openChannel: OpenChannelConfig;
}
export interface SBUConfigRemote {
    common: CommonConfig;
    groupChannel: Omit<GroupChannelConfig, 'channel'> & {
        channel: Omit<GroupChannelConfig['channel'], 'typingIndicatorTypes' | 'enableFeedback' | 'enableSuggestedReplies' | 'showSuggestedRepliesFor' | 'suggestedRepliesDirection' | 'enableMarkdownForUserMessage' | 'enableFormTypeMessage'>;
    };
    openChannel: OpenChannelConfig;
}
export interface SBUConfigPayload {
    updatedAt: number;
    configuration: SBUConfigRemote;
}
export type SBUConfigPayloadRaw = SnakeCasedPropertiesDeep<SBUConfigPayload>;
export {};

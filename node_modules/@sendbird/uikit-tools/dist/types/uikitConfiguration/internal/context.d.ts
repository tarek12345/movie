import React from 'react';
import type { PartialDeep } from 'type-fest';
import type SendbirdChat from '@sendbird/chat';
import type { SBUConfig } from '../types.js';
import { SBUConfigStorage } from './configManager.js';
/**
 * initDashboardConfigs: You should call this function when the sdk.connect() is resolved.
 * configs: The configs set by code level and dashboard level.
 * configsWithAppAttr: The configs helper for features related to app attributes.
 * */
interface UIKitConfigContextInterface {
    initDashboardConfigs: (sdk: SendbirdChat) => Promise<void>;
    configs: SBUConfig;
    configsWithAppAttr: (sdk: SendbirdChat) => {
        groupChannel: {
            channel: {
                enableReactions: boolean;
                enableReactionsSupergroup: boolean;
                enableOgtag: boolean;
            };
            setting: {
                enableMessageSearch: boolean;
            };
        };
        openChannel: {
            channel: {
                enableOgtag: boolean;
            };
        };
    };
}
declare const UIKitConfigContext: React.Context<UIKitConfigContextInterface>;
export type UIKitConfigProviderProps = React.PropsWithChildren<{
    localConfigs?: PartialDeep<SBUConfig>;
    storage?: SBUConfigStorage;
}>;
declare const UIKitConfigProvider: ({ storage, children, localConfigs }: UIKitConfigProviderProps) => React.JSX.Element;
declare const useUIKitConfig: () => UIKitConfigContextInterface;
export { UIKitConfigContext, UIKitConfigProvider, useUIKitConfig };

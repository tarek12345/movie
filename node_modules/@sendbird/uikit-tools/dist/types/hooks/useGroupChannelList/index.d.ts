import type { SendbirdChatWith } from '@sendbird/chat';
import type { GroupChannel, GroupChannelCollection, GroupChannelCollectionParams, GroupChannelFilterParams, GroupChannelModule } from '@sendbird/chat/groupChannel';
type CollectionCreatorBasicParams = Omit<GroupChannelCollectionParams, 'filter'> & Pick<GroupChannelFilterParams, 'includeEmpty'>;
type UseGroupChannelListOptions = {
    collectionCreator?: (basicParams: CollectionCreatorBasicParams) => GroupChannelCollection;
    markAsDelivered?: (channels: GroupChannel[]) => void;
    onChannelsAdded?: (channels: GroupChannel[]) => void;
    onChannelsUpdated?: (channels: GroupChannel[]) => void;
    onChannelsDeleted?: (channelUrls: string[]) => void;
};
export declare const useGroupChannelList: (sdk: SendbirdChatWith<[GroupChannelModule]>, options?: UseGroupChannelListOptions) => {
    /**
     * Initializing state, only available on first render
     * */
    initialized: boolean;
    /**
     * Get group channels state
     * */
    groupChannels: GroupChannel[];
    /**
     * Refresh, clear and reload messages from latest
     * @return {Promise<void>}
     * */
    refresh: () => Promise<void>;
    /**
     * Refreshing state, status is changes when the refresh is called.
     * */
    refreshing: boolean;
    /**
     * Fetch more channels to state
     * @return {Promise<void>}
     * */
    loadMore: () => Promise<void>;
};
export {};

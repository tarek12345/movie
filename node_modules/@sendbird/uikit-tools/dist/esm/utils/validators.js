// NOTE: type guard fix for optional chaining - https://github.com/microsoft/TypeScript/pull/55613
export function isBoolean(val) {
    return typeof val === 'boolean';
}
export function isOneOf(val, values) {
    return values.includes(val);
}
export function isSet(val) {
    return val instanceof Set;
}
export function isNotEmptyArray(arr) {
    if (!arr || !Array.isArray(arr))
        return false;
    return arr.length !== 0;
}
export function isSameType(a, b) {
    // we do this cause typeof can't differenciate object/ array/ null
    return Object.prototype.toString.call(a) === Object.prototype.toString.call(b);
}

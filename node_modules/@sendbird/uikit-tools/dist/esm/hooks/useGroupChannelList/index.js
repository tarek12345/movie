var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { useEffect, useRef } from 'react';
import { GroupChannelEventSource, GroupChannelFilter } from '@sendbird/chat/groupChannel';
import { premiumFeatures } from '../../constants/premiumFeatures.js';
import { sbuConstants } from '../../constants/sbuConstants.js';
import { useAsyncEffect } from '../useAsyncEffect.js';
import { useGroupChannelHandler } from '../useGroupChannelHandler.js';
import { usePreservedCallback } from '../usePreservedCallback.js';
import { useGroupChannelListReducer } from './reducer.js';
const createGroupChannelListCollection = (sdk, collectionCreator) => {
    const basicParams = {
        includeEmpty: sbuConstants.collection.groupChannel.defaultIncludeEmpty,
        limit: sbuConstants.collection.groupChannel.defaultLimit,
        order: sbuConstants.collection.groupChannel.defaultOrder,
    };
    const passedCollection = collectionCreator === null || collectionCreator === void 0 ? void 0 : collectionCreator(basicParams);
    if (passedCollection)
        return passedCollection;
    return sdk.groupChannel.createGroupChannelCollection(Object.assign(Object.assign({}, basicParams), { filter: new GroupChannelFilter(basicParams) }));
};
export const useGroupChannelList = (sdk, options) => {
    var _a, _b, _c;
    const deliveryReceiptEnabled = Boolean((_b = (_a = sdk.appInfo) === null || _a === void 0 ? void 0 : _a.premiumFeatureList) === null || _b === void 0 ? void 0 : _b.includes(premiumFeatures.delivery_receipt));
    const collectionRef = useRef();
    // update reference for event handler
    const internalOptions = useRef(options);
    internalOptions.current = options;
    const { initialized, groupChannels, refreshing, appendChannels, deleteChannels, updateRefreshing, updateInitialized, } = useGroupChannelListReducer();
    const updateChannelsAndMarkAsDelivered = (shouldMarkAsDelivered, source, updatedChannels) => {
        var _a, _b, _c, _d;
        const channels = (_b = (_a = collectionRef.current) === null || _a === void 0 ? void 0 : _a.channels) !== null && _b !== void 0 ? _b : [];
        appendChannels(channels, true);
        if (shouldMarkAsDelivered && deliveryReceiptEnabled) {
            switch (source) {
                case GroupChannelEventSource.EVENT_MESSAGE_RECEIVED:
                case GroupChannelEventSource.EVENT_MESSAGE_SENT:
                case GroupChannelEventSource.SYNC_CHANNEL_BACKGROUND:
                case GroupChannelEventSource.SYNC_CHANNEL_CHANGELOGS:
                case undefined:
                    (_d = (_c = internalOptions.current) === null || _c === void 0 ? void 0 : _c.markAsDelivered) === null || _d === void 0 ? void 0 : _d.call(_c, updatedChannels !== null && updatedChannels !== void 0 ? updatedChannels : channels);
                    break;
            }
        }
    };
    const init = usePreservedCallback((uid) => __awaiter(void 0, void 0, void 0, function* () {
        var _d, _e, _f, _g;
        if (collectionRef.current)
            (_d = collectionRef.current) === null || _d === void 0 ? void 0 : _d.dispose();
        if (uid) {
            collectionRef.current = createGroupChannelListCollection(sdk, options === null || options === void 0 ? void 0 : options.collectionCreator);
            (_e = collectionRef.current) === null || _e === void 0 ? void 0 : _e.setGroupChannelCollectionHandler({
                onChannelsAdded: (context, channels) => {
                    var _a, _b;
                    const groupChannels = channels.filter((channel) => channel.isGroupChannel());
                    updateChannelsAndMarkAsDelivered(true, context.source, groupChannels);
                    (_b = (_a = internalOptions.current) === null || _a === void 0 ? void 0 : _a.onChannelsAdded) === null || _b === void 0 ? void 0 : _b.call(_a, groupChannels);
                },
                onChannelsUpdated: (context, channels) => {
                    var _a, _b;
                    const groupChannels = channels.filter((channel) => channel.isGroupChannel());
                    updateChannelsAndMarkAsDelivered(true, context.source, groupChannels);
                    (_b = (_a = internalOptions.current) === null || _a === void 0 ? void 0 : _a.onChannelsUpdated) === null || _b === void 0 ? void 0 : _b.call(_a, groupChannels);
                },
                onChannelsDeleted: (_, channelUrls) => {
                    var _a, _b;
                    updateChannelsAndMarkAsDelivered(false);
                    (_b = (_a = internalOptions.current) === null || _a === void 0 ? void 0 : _a.onChannelsDeleted) === null || _b === void 0 ? void 0 : _b.call(_a, channelUrls);
                },
            });
            if ((_f = collectionRef.current) === null || _f === void 0 ? void 0 : _f.hasMore) {
                yield ((_g = collectionRef.current) === null || _g === void 0 ? void 0 : _g.loadMore());
                updateChannelsAndMarkAsDelivered(true);
            }
        }
    }));
    useEffect(() => {
        return () => {
            var _a;
            if (collectionRef.current)
                (_a = collectionRef.current) === null || _a === void 0 ? void 0 : _a.dispose();
        };
    }, []);
    useAsyncEffect(() => __awaiter(void 0, void 0, void 0, function* () {
        updateInitialized(false);
        if (sdk.currentUser) {
            yield init(sdk.currentUser.userId);
            updateInitialized(true);
        }
    }), [sdk, (_c = sdk.currentUser) === null || _c === void 0 ? void 0 : _c.userId]);
    useGroupChannelHandler(sdk, {
        onUserBanned: (channel, user) => {
            var _a, _b, _c;
            const isMe = user.userId === ((_a = sdk.currentUser) === null || _a === void 0 ? void 0 : _a.userId);
            if (isMe) {
                deleteChannels([channel.url]);
                (_c = (_b = internalOptions.current) === null || _b === void 0 ? void 0 : _b.onChannelsDeleted) === null || _c === void 0 ? void 0 : _c.call(_b, [channel.url]);
            }
            else {
                updateChannelsAndMarkAsDelivered(false);
            }
        },
    });
    const refresh = usePreservedCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        if (sdk.currentUser) {
            updateRefreshing(true);
            yield init(sdk.currentUser.userId);
            updateRefreshing(false);
        }
    }));
    const loadMore = usePreservedCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        var _h, _j;
        if ((_h = collectionRef.current) === null || _h === void 0 ? void 0 : _h.hasMore) {
            yield ((_j = collectionRef.current) === null || _j === void 0 ? void 0 : _j.loadMore());
            updateChannelsAndMarkAsDelivered(true);
        }
    }));
    return {
        /**
         * Initializing state, only available on first render
         * */
        initialized,
        /**
         * Get group channels state
         * */
        groupChannels,
        /**
         * Refresh, clear and reload messages from latest
         * @return {Promise<void>}
         * */
        refresh,
        /**
         * Refreshing state, status is changes when the refresh is called.
         * */
        refreshing,
        /**
         * Fetch more channels to state
         * @return {Promise<void>}
         * */
        loadMore,
    };
};

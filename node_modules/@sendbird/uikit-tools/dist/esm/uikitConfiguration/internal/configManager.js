var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { mergeObject } from '../../utils/mergeObject.js';
import { initialRemoteConfig } from './initialConfig.js';
export const MemoryStorage = {
    items: {},
    getItem(key) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return (_a = MemoryStorage.items[key]) !== null && _a !== void 0 ? _a : null;
        });
    },
    setItem(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            MemoryStorage.items[key] = value;
        });
    },
};
export class UIKitConfigManager {
    constructor(storage) {
        this.storage = storage !== null && storage !== void 0 ? storage : MemoryStorage;
    }
    init(appId) {
        this.key = `sbu@${appId}.uikitConfiguration`;
        return this.get();
    }
    get safeKey() {
        if (!this.key)
            throw new Error('Please UIKitConfigManager.init() first');
        return this.key;
    }
    update(remoteConfigPayload) {
        return __awaiter(this, void 0, void 0, function* () {
            const storedConfigPayload = yield this.get();
            const mergedConfigPayload = {
                updatedAt: remoteConfigPayload.updatedAt,
                configuration: mergeObject(storedConfigPayload.configuration, remoteConfigPayload.configuration),
            };
            yield this.storage.setItem(this.safeKey, JSON.stringify(mergedConfigPayload));
            return mergedConfigPayload;
        });
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const initialPayload = {
                updatedAt: 0,
                configuration: initialRemoteConfig,
            };
            try {
                const storedConfig = yield this.storage.getItem(this.safeKey);
                if (storedConfig) {
                    // TODO: Validation
                    return JSON.parse(storedConfig);
                }
                else {
                    return initialPayload;
                }
            }
            catch (_a) {
                return initialPayload;
            }
        });
    }
}

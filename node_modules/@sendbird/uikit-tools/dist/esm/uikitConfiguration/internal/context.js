var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import React, { createContext, useCallback, useContext, useState } from 'react';
import { applicationAttributes } from '../../constants/index.js';
import { usePreservedCallback } from '../../hooks/index.js';
import { snakeToCamel } from '../../utils/convertors.js';
import { UIKitConfigManager } from './configManager.js';
import { createInitialRemoteConfig, initialConfig } from './initialConfig.js';
import { getConfigsByPriority, isRawSBUConfigPayload } from './utils.js';
function getApplicationAttributes(sdk) {
    var _a, _b;
    return (_b = (_a = sdk.appInfo) === null || _a === void 0 ? void 0 : _a.applicationAttributes) !== null && _b !== void 0 ? _b : [];
}
const UIKitConfigContext = createContext({
    initDashboardConfigs: () => Promise.resolve(),
    configs: initialConfig,
    configsWithAppAttr: () => initialConfig,
});
const UIKitConfigProvider = ({ storage, children, localConfigs = {} }) => {
    // Set by Feature Config setting in Dashboard
    const [remoteConfigs, setRemoteConfigs] = useState(createInitialRemoteConfig);
    const [manager] = useState(() => new UIKitConfigManager(storage));
    const initDashboardConfigs = useCallback((sdk) => __awaiter(void 0, void 0, void 0, function* () {
        // Compare the sdk uikitConfig's lastUpdatedAt <-> stored one
        const storedConfigPayload = yield manager.init(sdk.appId);
        if (sdk.appInfo && sdk.appInfo.uikitConfigInfo.lastUpdatedAt === storedConfigPayload.updatedAt) {
            setRemoteConfigs(storedConfigPayload.configuration);
        }
        else {
            try {
                // @ts-ignore
                const response = yield sdk.getUIKitConfiguration();
                if (isRawSBUConfigPayload(response.json)) {
                    const remoteConfigPayload = snakeToCamel(response.json);
                    const updatedConfigPayload = yield manager.update(remoteConfigPayload);
                    setRemoteConfigs(updatedConfigPayload.configuration);
                }
            }
            catch (_a) {
                setRemoteConfigs(storedConfigPayload.configuration);
            }
        }
    }), [manager]);
    const configs = getConfigsByPriority(localConfigs, remoteConfigs);
    const configsWithAppAttr = usePreservedCallback((sdk) => ({
        groupChannel: {
            channel: {
                get enableReactions() {
                    return (configs.groupChannel.channel.enableReactions &&
                        getApplicationAttributes(sdk).includes(applicationAttributes.reactions));
                },
                get enableReactionsSupergroup() {
                    return (configs.groupChannel.channel.enableReactionsSupergroup &&
                        getApplicationAttributes(sdk).includes(applicationAttributes.reactions));
                },
                get enableOgtag() {
                    return (configs.groupChannel.channel.enableOgtag &&
                        getApplicationAttributes(sdk).includes(applicationAttributes.enable_og_tag));
                },
            },
            setting: {
                get enableMessageSearch() {
                    return (configs.groupChannel.setting.enableMessageSearch &&
                        getApplicationAttributes(sdk).includes(applicationAttributes.message_search_v3));
                },
            },
        },
        openChannel: {
            channel: {
                get enableOgtag() {
                    return (configs.openChannel.channel.enableOgtag &&
                        getApplicationAttributes(sdk).includes(applicationAttributes.enable_og_tag));
                },
            },
        },
    }));
    return (React.createElement(UIKitConfigContext.Provider, { value: { initDashboardConfigs, configs, configsWithAppAttr } }, children));
};
const useUIKitConfig = () => useContext(UIKitConfigContext);
export { UIKitConfigContext, UIKitConfigProvider, useUIKitConfig };

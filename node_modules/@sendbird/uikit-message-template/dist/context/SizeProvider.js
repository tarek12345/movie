var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { createContext, useCallback, useContext, useState } from 'react';
const SizeContext = createContext({
    sizes: {},
    updateSize: () => { },
});
const SizeContextProvider = ({ children }) => {
    const [sizes, setSizes] = useState({});
    const updateSize = useCallback((_a) => {
        var { id } = _a, rest = __rest(_a, ["id"]);
        if (id) {
            setSizes((prevSizes) => (Object.assign(Object.assign({}, prevSizes), { [id]: rest })));
        }
    }, []);
    return React.createElement(SizeContext.Provider, { value: { sizes, updateSize } }, children);
};
const useSizeContext = () => useContext(SizeContext);
export { SizeContextProvider, useSizeContext };

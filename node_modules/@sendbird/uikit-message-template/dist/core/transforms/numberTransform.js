import { ComponentType, } from '../../types/components.js';
const isNumber = (val) => {
    if (typeof val === 'string') {
        return !Number.isNaN(Number(val));
    }
    return typeof val === 'number' && !Number.isNaN(val);
};
const outSingle = (key, obj) => {
    if (obj[key] === undefined || obj[key] === null)
        return {};
    return isNumber(obj[key]) ? { [key]: Number(obj[key]) } : {};
};
const outSpacing = (key, spacing) => {
    if (!spacing)
        return {};
    return {
        [key]: {
            left: isNumber(spacing.left) ? Number(spacing.left) : spacing.left,
            right: isNumber(spacing.right) ? Number(spacing.right) : spacing.right,
            top: isNumber(spacing.top) ? Number(spacing.top) : spacing.top,
            bottom: isNumber(spacing.bottom) ? Number(spacing.bottom) : spacing.bottom,
        },
    };
};
const outSize = (key, size) => {
    if (!size)
        return {};
    return {
        [key]: {
            type: size.type,
            value: isNumber(size.value) ? Number(size.value) : size.value,
        },
    };
};
const outMetadata = (metaData) => {
    if (!metaData)
        return {};
    return {
        metaData: {
            pixelWidth: isNumber(metaData.pixelWidth) ? Number(metaData.pixelWidth) : metaData.pixelWidth,
            pixelHeight: isNumber(metaData.pixelHeight) ? Number(metaData.pixelHeight) : metaData.pixelHeight,
        },
    };
};
const outViewStyle = (viewStyle) => {
    if (!viewStyle)
        return {};
    return {
        viewStyle: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, viewStyle), outSingle('borderWidth', viewStyle)), outSingle('radius', viewStyle)), outSpacing('margin', viewStyle.margin)), outSpacing('padding', viewStyle.padding)),
    };
};
const outTextStyle = (textStyle) => {
    if (!textStyle)
        return {};
    return {
        textStyle: Object.assign(Object.assign(Object.assign({}, textStyle), outSingle('size', textStyle)), outSingle('weight', textStyle)),
    };
};
const outCarouselStyle = (carouselstyle) => {
    if (!carouselstyle)
        return {};
    return {
        carouselStyle: Object.assign(Object.assign({}, carouselstyle), outSingle('spacing', carouselstyle)),
    };
};
const outViewProps = (view) => {
    return Object.assign(Object.assign(Object.assign({}, outSize('width', view.width)), outSize('height', view.height)), outViewStyle(view.viewStyle));
};
const outTextProps = (text) => {
    return Object.assign(Object.assign(Object.assign({}, outViewProps(text)), outTextStyle(text.textStyle)), outSingle('maxTextLines', text));
};
const outImageProps = (image) => {
    return Object.assign(Object.assign({}, outViewProps(image)), outMetadata(image.metaData));
};
const outCarouselProps = (carousel) => {
    return Object.assign(Object.assign(Object.assign({}, outViewProps(carousel)), outCarouselStyle(carousel.carouselStyle)), { 
        // Convert only top-level items to find has fill width values.
        items: carousel.items.map((item) => (Object.assign(Object.assign({}, item), { body: Object.assign(Object.assign({}, item.body), { items: item.body.items.map((it) => numberTransform.run(it)) }) }))) });
};
export const numberTransform = {
    run(prop) {
        if (prop.type === ComponentType.Text || prop.type === ComponentType.TextButton) {
            return Object.assign(Object.assign({}, prop), outTextProps(prop));
        }
        if (prop.type === ComponentType.ImageButton || prop.type === ComponentType.Image) {
            return Object.assign(Object.assign({}, prop), outImageProps(prop));
        }
        if (prop.type === ComponentType.Carousel) {
            return Object.assign(Object.assign({}, prop), outCarouselProps(prop));
        }
        return Object.assign(Object.assign({}, prop), outViewProps(prop));
    },
};

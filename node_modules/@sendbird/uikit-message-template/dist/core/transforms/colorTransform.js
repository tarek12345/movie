import { ComponentType } from '../../types/components.js';
const outSingle = (key, obj) => {
    if (typeof obj[key] !== 'string')
        return {};
    return { [key]: argbToRgba(obj[key]) };
};
function argbToRgba(string) {
    if (!string.startsWith('#')) {
        return string;
    }
    if (string.length === 9) {
        return `#${string.slice(3)}${string[1]}${string[2]}`;
    }
    if (string.length === 5) {
        return `#${string.slice(2)}${string[1]}`;
    }
    return string;
}
const outViewStyle = (viewStyle) => {
    if (!viewStyle)
        return {};
    return {
        viewStyle: Object.assign(Object.assign(Object.assign({}, viewStyle), outSingle('backgroundColor', viewStyle)), outSingle('borderColor', viewStyle)),
    };
};
const outTextStyle = (textStyle) => {
    if (!textStyle)
        return {};
    return {
        textStyle: Object.assign(Object.assign({}, textStyle), outSingle('color', textStyle)),
    };
};
const outImageStyle = (imageStyle) => {
    if (!imageStyle)
        return {};
    return {
        imageStyle: Object.assign(Object.assign({}, imageStyle), outSingle('tintColor', imageStyle)),
    };
};
export const colorTransform = {
    run(prop) {
        if (prop.type === ComponentType.Text || prop.type === ComponentType.TextButton) {
            return Object.assign(Object.assign(Object.assign({}, prop), outViewStyle(prop.viewStyle)), outTextStyle(prop.textStyle));
        }
        if (prop.type === ComponentType.ImageButton || prop.type === ComponentType.Image) {
            return Object.assign(Object.assign(Object.assign({}, prop), outViewStyle(prop.viewStyle)), outImageStyle(prop.imageStyle));
        }
        return Object.assign(Object.assign({}, prop), outViewStyle(prop.viewStyle));
    },
};

import React from 'react';
import type { BasicProps, ComponentType, ComponentsUnion, GetProperties } from '../types/components';
type FuncComponent<Props, ParsedStyle> = (props: BasicProps<Props, ParsedStyle>) => React.ReactElement | null;
type ComponentProperties<Type extends ComponentType> = GetProperties<Type, ComponentsUnion>;
interface CreateRendererParams<ParsedStyle> {
    views?: {
        [component in ComponentType]?: FuncComponent<ComponentProperties<component>, ParsedStyle>;
    };
}
export type Renderer<ParsedStyle> = {
    [component in ComponentType]: FuncComponent<ComponentProperties<component>, ParsedStyle>;
};
export declare function createRenderer<ParsedStyle = object | string>(params?: CreateRendererParams<ParsedStyle>): Renderer<ParsedStyle>;
export {};

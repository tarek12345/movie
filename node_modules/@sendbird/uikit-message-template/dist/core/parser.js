// -------- Set property mapper
import { ComponentType, } from '../types/components';
import { colorTransform } from './transforms/colorTransform';
import { numberTransform } from './transforms/numberTransform';
const MAPPER = () => undefined;
export const createParser = (params) => {
    var _a;
    const defaultMapper = (params === null || params === void 0 ? void 0 : params.defaultMapper) || MAPPER;
    const mapper = {
        defaultMapper,
        mapBoxProps: (params === null || params === void 0 ? void 0 : params.mapBoxProps) || defaultMapper,
        mapTextProps: (params === null || params === void 0 ? void 0 : params.mapTextProps) || defaultMapper,
        mapImageProps: (params === null || params === void 0 ? void 0 : params.mapImageProps) || defaultMapper,
        mapTextButtonProps: (params === null || params === void 0 ? void 0 : params.mapTextButtonProps) || defaultMapper,
        mapImageButtonProps: (params === null || params === void 0 ? void 0 : params.mapImageButtonProps) || defaultMapper,
        mapCarouselProps: (params === null || params === void 0 ? void 0 : params.mapCarouselProps) || defaultMapper,
    };
    const transforms = [colorTransform, numberTransform, ...((_a = params === null || params === void 0 ? void 0 : params.transforms) !== null && _a !== void 0 ? _a : [])];
    const transformDirty = new Set();
    return {
        setTransforms(newTransforms) {
            transforms.length = 0;
            transforms.push(...newTransforms);
            transformDirty.clear();
        },
        addTransforms(newTransforms) {
            transforms.push(...newTransforms);
        },
        parse(rawItem, options) {
            // Note: it is for mutable transforms
            // const uniqId =
            //   typeof options.depth === 'number' && typeof options.elemIdx === 'number'
            //     ? `id-${options.depth}-${options.elemIdx}`
            //     : rawItem.id ?? rawItem.elementId ?? JSON.stringify(rawItem);
            //
            // let item = rawItem;
            // if (!transformDirty.has(uniqId)) {
            //   item = transforms.reduce((it, transform) => transform(it), rawItem);
            //   transformDirty.add(uniqId);
            // }
            const item = transforms.reduce((it, transform) => transform.run(it), rawItem);
            switch (item.type) {
                case ComponentType.Box: {
                    return { transformed: item, properties: mapper.mapBoxProps(item, options) };
                }
                case ComponentType.Text: {
                    return { transformed: item, properties: mapper.mapTextProps(item, options) };
                }
                case ComponentType.Image: {
                    return { transformed: item, properties: mapper.mapImageProps(item, options) };
                }
                case ComponentType.TextButton: {
                    return { transformed: item, properties: mapper.mapTextButtonProps(item, options) };
                }
                case ComponentType.ImageButton: {
                    return { transformed: item, properties: mapper.mapImageButtonProps(item, options) };
                }
                case ComponentType.Carousel: {
                    return { transformed: item, properties: mapper.mapCarouselProps(item, options) };
                }
                default:
                    return { transformed: item, properties: undefined };
            }
        },
    };
};
export const DEFAULT_PARSER_VALUES = {
    light: { _: undefined },
    dark: { _: undefined },
};

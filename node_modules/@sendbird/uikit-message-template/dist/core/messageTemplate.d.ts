import React from 'react';
import { ComponentsUnion } from '../types/components';
import type { Layout } from '../types/styles';
import type { Template } from '../types/template';
import { Parser } from './parser';
import { Renderer } from './renderer';
interface ContainerProps extends React.PropsWithChildren<unknown> {
    className?: string;
}
interface MessageTemplateOptions<ParsedProperties> {
    parser?: Parser<ParsedProperties>;
    renderer?: Renderer<ParsedProperties>;
    Container?: (props: ContainerProps) => React.ReactElement;
    UnknownMessage?: (props: {
        item: ComponentsUnion['properties'];
    }) => React.ReactElement | null;
}
export interface MessageTemplateProps {
    /**
     * @description template items. ** IT IS NOT TRANSFORMED YET IN HERE **.
     * */
    templateItems: Template['body']['items'];
    templateVersion?: Template['version'];
    parentLayout?: Layout;
    depth?: number;
    isRoot?: boolean;
}
export declare const createMessageTemplate: <T>(opts: MessageTemplateOptions<T>) => {
    MessageTemplate: ({ templateVersion, templateItems, parentLayout, }: MessageTemplateProps) => React.JSX.Element;
    MessageTemplateBase: ({ templateItems, templateVersion, parentLayout, depth, }: MessageTemplateProps) => React.JSX.Element;
};
export {};

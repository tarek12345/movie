import type React from 'react';
import type { Action } from './properties';
import type { Align, CarouselStyle, ImageMetaData, ImageStyle, Layout, SizeSpec, TextStyle, ViewStyle } from './styles';
import type { Template } from './template';
export type BasicProps<T, ParsedProperties> = React.PropsWithChildren<T & {
    key: number;
    parsedProperties?: ParsedProperties;
    parentLayout?: Layout;
    siblings: Array<ComponentsUnion['properties']>;
}>;
export type GetProperties<Type extends ComponentType, U extends ComponentsUnion> = U extends {
    type: Type;
    properties: infer P;
} ? P : never;
export type ComponentsUnion = {
    type: ComponentType.Box;
    properties: Box;
} | {
    type: ComponentType.Text;
    properties: Text;
} | {
    type: ComponentType.Image;
    properties: Image;
} | {
    type: ComponentType.TextButton;
    properties: TextButton;
} | {
    type: ComponentType.ImageButton;
    properties: ImageButton;
} | {
    type: ComponentType.Carousel;
    properties: Carousel;
};
export declare enum ComponentType {
    Box = "box",
    Text = "text",
    Image = "image",
    TextButton = "textButton",
    ImageButton = "imageButton",
    Carousel = "carouselView"
}
export interface View {
    /**
     * this id will be generated by setTemplateItemId
     * to save each elements' size updated by SizeProvider,
     * and used only for internal purpose
     * @link https://github.com/sendbird/sendbird-uikit-core-ts/pull/29#discussion_r1175482926
     */
    id?: string;
    type: ComponentType;
    action?: Action;
    width?: SizeSpec;
    height?: SizeSpec;
    viewStyle?: ViewStyle;
    elementId?: string;
}
export interface Box extends View {
    type: ComponentType.Box;
    layout?: Layout;
    align?: Align;
    items?: ComponentsUnion['properties'][];
}
export interface Text extends View {
    type: ComponentType.Text;
    text: string;
    maxTextLines?: number;
    align?: Align;
    textStyle?: TextStyle;
}
export interface Image extends View {
    type: ComponentType.Image;
    imageUrl: string;
    imageStyle?: ImageStyle;
    metaData?: ImageMetaData;
}
export interface TextButton extends View {
    type: ComponentType.TextButton;
    text: string;
    maxTextLines?: number;
    textStyle?: TextStyle;
}
export interface ImageButton extends View {
    type: ComponentType.ImageButton;
    imageUrl: string;
    imageStyle?: ImageStyle;
    metaData?: ImageMetaData;
}
export interface Carousel extends View {
    type: ComponentType.Carousel;
    items: Template[];
    carouselStyle?: CarouselStyle;
}

const memoize = (fn) => {
    const cache = new Map();
    const cached = function (val) {
        return cache.has(val) ? cache.get(val) : cache.set(val, fn.call(this, val)) && cache.get(val);
    };
    cached.cache = cache;
    return cached;
};
/**
 * Generate each item's id by each item's array depth
 */
export const setTemplateItemId = memoize((data) => {
    const addIdRecursively = (item, id) => {
        if ('items' in item && (item === null || item === void 0 ? void 0 : item.items) != null) {
            item.items.forEach((subItem, subIdx) => {
                const subId = `${id}-${subIdx}`;
                subItem.id = subId;
                addIdRecursively(subItem, subId);
            });
        }
    };
    data.forEach((item, idx) => {
        const id = `${idx}`;
        item.id = id;
        addIdRecursively(item, id);
    });
    return data;
});

import React, { createContext, useCallback, useContext, useState } from 'react';

type Size = {
  width: number;
  height: number;
  contentWidth: number;
  contentHeight: number;
  paddingWidth: number;
  paddingHeight: number;
};
type Sizes = Record<string, Size>;
type UpdateParams = { id?: string } & Size;

interface SizeContextInterface {
  sizes: Sizes;
  updateSize: ({ id, width, height }: UpdateParams) => void;
}

const SizeContext = createContext<SizeContextInterface>({
  sizes: {},
  updateSize: () => {},
});

const SizeContextProvider = ({ children }: React.PropsWithChildren<unknown>) => {
  const [sizes, setSizes] = useState<Sizes>({});
  const updateSize = useCallback(({ id, ...rest }: UpdateParams) => {
    if (id) {
      setSizes((prevSizes) => ({
        ...prevSizes,
        [id]: rest,
      }));
    }
  }, []);

  return <SizeContext.Provider value={{ sizes, updateSize }}>{children}</SizeContext.Provider>;
};

const useSizeContext = () => useContext(SizeContext);

export { SizeContextProvider, useSizeContext };

import type { ComponentsUnion } from '../types/components';

type Func<T, R = any> = (...args: T[]) => R;
const memoize = <T = any>(fn: Func<T>) => {
  const cache = new Map();
  const cached = function (this: any, val: T) {
    return cache.has(val) ? cache.get(val) : cache.set(val, fn.call(this, val)) && cache.get(val);
  };
  cached.cache = cache;
  return cached;
};

/**
 * Generate each item's id by each item's array depth
 */
export const setTemplateItemId = memoize((data: ComponentsUnion['properties'][]) => {
  const addIdRecursively = (item: ComponentsUnion['properties'], id: string) => {
    if ('items' in item && item?.items != null) {
      item.items.forEach((subItem: any, subIdx: number) => {
        const subId = `${id}-${subIdx}`;
        subItem.id = subId;
        addIdRecursively(subItem, subId);
      });
    }
  };

  data.forEach((item, idx) => {
    const id = `${idx}`;
    item.id = id;
    addIdRecursively(item, id);
  });
  return data;
});

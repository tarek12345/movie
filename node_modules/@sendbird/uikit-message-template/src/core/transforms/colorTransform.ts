import { ComponentType } from '../../types/components.js';
import type { ImageStyle, TextStyle, ViewStyle } from '../../types/styles.js';
import type { ParserTransform } from '../parser';

const outSingle = <T extends Record<any, any>, K extends keyof T>(key: K, obj: T) => {
  if (typeof obj[key] !== 'string') return {};
  return { [key]: argbToRgba(obj[key]) };
};

function argbToRgba(string: string) {
  if (!string.startsWith('#')) {
    return string;
  }
  if (string.length === 9) {
    return `#${string.slice(3)}${string[1]}${string[2]}`;
  }
  if (string.length === 5) {
    return `#${string.slice(2)}${string[1]}`;
  }
  return string;
}

const outViewStyle = (viewStyle?: ViewStyle) => {
  if (!viewStyle) return {};
  return {
    viewStyle: {
      ...viewStyle,
      ...outSingle('backgroundColor', viewStyle),
      ...outSingle('borderColor', viewStyle),
    },
  };
};
const outTextStyle = (textStyle?: TextStyle) => {
  if (!textStyle) return {};
  return {
    textStyle: {
      ...textStyle,
      ...outSingle('color', textStyle),
    },
  };
};
const outImageStyle = (imageStyle?: ImageStyle) => {
  if (!imageStyle) return {};
  return {
    imageStyle: {
      ...imageStyle,
      ...outSingle('tintColor', imageStyle),
    },
  };
};

export const colorTransform: ParserTransform = {
  run(prop) {
    if (prop.type === ComponentType.Text || prop.type === ComponentType.TextButton) {
      return { ...prop, ...outViewStyle(prop.viewStyle), ...outTextStyle(prop.textStyle) };
    }

    if (prop.type === ComponentType.ImageButton || prop.type === ComponentType.Image) {
      return { ...prop, ...outViewStyle(prop.viewStyle), ...outImageStyle(prop.imageStyle) };
    }

    return { ...prop, ...outViewStyle(prop.viewStyle) };
  },
};
